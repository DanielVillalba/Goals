//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataSource
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class CDPTrackEntities : DbContext
    {
        public CDPTrackEntities()
            : base("name=CDPTrackEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<GoalTracking> GoalTrackings { get; set; }
        public DbSet<ProgressEnum> ProgressEnums { get; set; }
        public DbSet<Resource> Resources { get; set; }
        public DbSet<Location> Locations { get; set; }
        public DbSet<Objective> Objectives { get; set; }
        public DbSet<Category> Category { get; set; }
        public DbSet<Area> Area { get; set; }
        public DbSet<Employee> Employee { get; set; }
        public DbSet<Position> Position { get; set; }
        public DbSet<PositionsHierarchy> PositionsHierarchy { get; set; }
        public DbSet<Suggestions> Suggestions { get; set; }
        public DbSet<Technologies> Technologies { get; set; }
        public DbSet<Level> Level { get; set; }
        public DbSet<TrainingProgram> TrainingProgram { get; set; }
        public DbSet<TrainingProgramCategory> TrainingProgramCategory { get; set; }
        public DbSet<TrainingProgramDetails> TrainingProgramDetails { get; set; }
        public DbSet<GeneralTrainingProgram> GeneralTrainingProgram { get; set; }
        public DbSet<GeneralTrainingProgramDetails> GeneralTrainingProgramDetails { get; set; }
        public DbSet<TrainingProgramOnDemand> TrainingProgramOnDemand { get; set; }
        public DbSet<TrainingProgramOnDemandDetails> TrainingProgramOnDemandDetails { get; set; }
        public DbSet<SkillCompassGlossary> SkillCompassGlossary { get; set; }
        public DbSet<Project> Project { get; set; }
        public DbSet<GoalDates> GoalDates { get; set; }
        public DbSet<GoalEnum> GoalEnum { get; set; }
        public DbSet<Term> Term { get; set; }
        public DbSet<TrainingCategory> TrainingCategory { get; set; }
        public DbSet<GeneralTrainingProgramVideo> GeneralTrainingProgramVideo { get; set; }
        public DbSet<TrainingProgramVideo> TrainingProgramVideo { get; set; }
        public DbSet<GoalsCompletedTotal> GoalsCompletedTotal { get; set; }
        public DbSet<ResourceGoals> ResourceGoals { get; set; }
        public DbSet<Sources> Sources { get; set; }
        public DbSet<GoalsView> GoalsView { get; set; }
        public DbSet<CDPView> CDPView { get; set; }
        public DbSet<GeneralTrainingProgramVisits> GeneralTrainingProgramVisits { get; set; }
        public DbSet<TrainingProgramOnDemandVisits> TrainingProgramOnDemandVisits { get; set; }
        public DbSet<TrainingProgramVisits> TrainingProgramVisits { get; set; }
        public DbSet<TrainingProgramOnDemandVisitsView> TrainingProgramOnDemandVisitsView { get; set; }
        public DbSet<TrainingProgramVisitsView> TrainingProgramVisitsView { get; set; }
        public DbSet<GeneralTrainingProgramVisitsView> GeneralTrainingProgramVisitsView { get; set; }
        public DbSet<TDURedeem> TDURedeem { get; set; }
        public DbSet<TDUReward> TDUReward { get; set; }
        public DbSet<Question> Question { get; set; }
        public DbSet<QuestionResponse> QuestionResponse { get; set; }
        public DbSet<Response> Response { get; set; }
        public DbSet<SurveyResource> SurveyResource { get; set; }
        public DbSet<Survey> Survey { get; set; }
        public DbSet<SurveyResponse> SurveyResponse { get; set; }
        public DbSet<Groups> Groups { get; set; }
        public DbSet<Employee_Groups> Employee_Groups { get; set; }
        public DbSet<CoreValues> CoreValues { get; set; }
        public DbSet<KeyThrusts> KeyThrusts { get; set; }
        public DbSet<OnePagePlan> OnePagePlan { get; set; }
        public DbSet<AnnualPriorities> AnnualPriorities { get; set; }
        public DbSet<QuarterlyActions> QuarterlyActions { get; set; }
        public DbSet<AppError> AppError { get; set; }
        public DbSet<Group_SectionAccess> Group_SectionAccess { get; set; }
        public DbSet<ValuesInfusion> ValuesInfusion { get; set; }
        public DbSet<QuarterlyPriorities> QuarterlyPriorities { get; set; }
        public DbSet<PersonalDevelopment> PersonalDevelopment { get; set; }
        public DbSet<RankCatalog> RankCatalog { get; set; }
        public DbSet<RankTypeCatalog> RankTypeCatalog { get; set; }
        public DbSet<Quarter> Quarter { get; set; }
        public DbSet<StrategicPriority> StrategicPriority { get; set; }
        public DbSet<LevelRank> LevelRank { get; set; }
        public DbSet<KPI> KPI { get; set; }
        public DbSet<Threshold> Threshold { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        [EdmFunction("CDPTrackEntities", "SplitString")]
        public virtual IQueryable<string> SplitString(string a, string delimiter)
        {
            var aParameter = a != null ?
                new ObjectParameter("a", a) :
                new ObjectParameter("a", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[CDPTrackEntities].[SplitString](@a, @delimiter)", aParameter, delimiterParameter);
        }
    
        [EdmFunction("CDPTrackEntities", "udf_ManagersCheck_members_list")]
        public virtual IQueryable<udf_ManagersCheck_members_list_Result> udf_ManagersCheck_members_list(Nullable<int> managerActiveDiretoryId, Nullable<int> managerDataBaseId, Nullable<System.DateTime> startDateQuarter, Nullable<System.DateTime> endDateQuarter, Nullable<System.DateTime> startLastDateQuarter, Nullable<System.DateTime> endLastDateQuarter)
        {
            var managerActiveDiretoryIdParameter = managerActiveDiretoryId.HasValue ?
                new ObjectParameter("managerActiveDiretoryId", managerActiveDiretoryId) :
                new ObjectParameter("managerActiveDiretoryId", typeof(int));
    
            var managerDataBaseIdParameter = managerDataBaseId.HasValue ?
                new ObjectParameter("managerDataBaseId", managerDataBaseId) :
                new ObjectParameter("managerDataBaseId", typeof(int));
    
            var startDateQuarterParameter = startDateQuarter.HasValue ?
                new ObjectParameter("startDateQuarter", startDateQuarter) :
                new ObjectParameter("startDateQuarter", typeof(System.DateTime));
    
            var endDateQuarterParameter = endDateQuarter.HasValue ?
                new ObjectParameter("endDateQuarter", endDateQuarter) :
                new ObjectParameter("endDateQuarter", typeof(System.DateTime));
    
            var startLastDateQuarterParameter = startLastDateQuarter.HasValue ?
                new ObjectParameter("startLastDateQuarter", startLastDateQuarter) :
                new ObjectParameter("startLastDateQuarter", typeof(System.DateTime));
    
            var endLastDateQuarterParameter = endLastDateQuarter.HasValue ?
                new ObjectParameter("endLastDateQuarter", endLastDateQuarter) :
                new ObjectParameter("endLastDateQuarter", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<udf_ManagersCheck_members_list_Result>("[CDPTrackEntities].[udf_ManagersCheck_members_list](@managerActiveDiretoryId, @managerDataBaseId, @startDateQuarter, @endDateQuarter, @startLastDateQuarter, @endLastDateQuarter)", managerActiveDiretoryIdParameter, managerDataBaseIdParameter, startDateQuarterParameter, endDateQuarterParameter, startLastDateQuarterParameter, endLastDateQuarterParameter);
        }
    }
}
